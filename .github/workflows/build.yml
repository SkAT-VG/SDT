name: build

on:
  push:
    branches:
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - develop

env:
  GH_API_HEADERS: -H "Accept:application/vnd.github+json" -H "Authorization:Bearer ${{ secrets.REPOSITORY_TOKEN }}" -H "X-GitHub-Api-Version:2022-11-28"
  GH_API_PREFIX: https://api.github.com/repos/${{ github.repository }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: [
          linux,
          win32,
          win64,
          macosx
        ]
        include:
        - container: ""
        - runs_on: ubuntu-latest
        - mingw: false
        - pd: true
        - max: true
        - target: linux
          container: ubuntu:16.04
          max: false
        - target: win32
          mingw: true
        - target: win64
          mingw: true
          pd: false
        - target: macosx
          runs_on: macos-latest
    runs-on: ${{ matrix.runs_on }}
    container: ${{ matrix.container }}
    env:
      RUNS_ON_UBUNTU: ${{ (matrix.container && startsWith(matrix.container, 'ubuntu')) || startsWith(matrix.runs_on, 'ubuntu') || '' }}
      SUDO: ${{ !matrix.container && startsWith(matrix.runs_on, 'ubuntu') && 'sudo' || '' }}
    steps:
    - name: Update packages
      if: ${{ env.RUNS_ON_UBUNTU }}
      run: |
        ${{ env.SUDO }} apt-get -y update
    - name: Install git and make
      if: ${{ env.RUNS_ON_UBUNTU && matrix.container }}
      run: |
        ${{ env.SUDO }} apt-get -y install software-properties-common
        ${{ env.SUDO }} add-apt-repository -y ppa:git-core/ppa
        ${{ env.SUDO }} apt-get -y update
        ${{ env.SUDO }} apt-get -y install git build-essential
    - name: Install mingw compiler
      if: ${{ env.RUNS_ON_UBUNTU && matrix.mingw }}
      run: ${{ env.SUDO }} apt-get -y install mingw-w64
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build everything
      run: make TARGET=${{ matrix.target }} -j16
    - name: Prepare package directory
      run: mkdir SoundDesignToolkit
    - name: Package library
      run: make TARGET=${{ matrix.target }} install_core DSTDIR=SoundDesignToolkit
    - name: Upload library
      uses: actions/upload-artifact@v3
      with:
        name: SDT_${{ matrix.target }}_lib
        path: SoundDesignToolkit
    - name: Reset package directory
      run: rm -rf SoundDesignToolkit && mkdir SoundDesignToolkit
    - name: Package Pd library
      if: ${{ matrix.pd }}
      run: make TARGET=${{ matrix.target }} install_pd DSTDIR=SoundDesignToolkit
    - name: Upload Pd library
      if: ${{ matrix.pd }}
      uses: actions/upload-artifact@v3
      with:
        name: SDT_${{ matrix.target }}_pd
        path: SoundDesignToolkit
    - name: Reset package directory
      run: rm -rf SoundDesignToolkit && mkdir SoundDesignToolkit
    - name: Package Max library
      if: ${{ matrix.max }}
      run: make TARGET=${{ matrix.target }} install_max DSTDIR=SoundDesignToolkit
    - name: Upload Max library
      if: ${{ matrix.max }}
      uses: actions/upload-artifact@v3
      with:
        name: SDT_${{ matrix.target }}_max
        path: SoundDesignToolkit

  doxygen:
    runs-on: ubuntu-latest
    outputs:
      SDT_CORE_VERSION: ${{ steps.version-log.outputs.SDT_CORE_VERSION }}
      SDT_PD_VERSION: ${{ steps.version-log.outputs.SDT_PD_VERSION }}
      SDT_MAX_VERSION: ${{ steps.version-log.outputs.SDT_MAX_VERSION }}
      SDT_FULL_VERSION: ${{ steps.version-log.outputs.SDT_FULL_VERSION }}
    steps:
    - name: Install doxygen
      run: |
        sudo apt-get -y update
        sudo apt-get -y install doxygen-latex
        sudo apt-get -y install latexmk
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Log version names
      id: version-log
      run: |
        echo "SDT_CORE_VERSION=$(make core_version)" >> "$GITHUB_OUTPUT"
        echo "SDT_PD_VERSION=$(make pd_version)" >> "$GITHUB_OUTPUT"
        echo "SDT_MAX_VERSION=$(make max_version)" >> "$GITHUB_OUTPUT"
        echo "SDT_FULL_VERSION=$(make full_version)" >> "$GITHUB_OUTPUT"
        echo "SDT_CORE_VERSION=$(make core_version)" >> "$GITHUB_ENV"
    - name: Build HTML
      run: doxygen
    - uses: actions/upload-artifact@v3
      with:
        name: doxygen-html
        path: doc/html
    - name: Build latex
      run: make
      working-directory: doc/latex
    - uses: actions/upload-artifact@v3
      with:
        name: refman
        path: doc/latex/refman.pdf

  release:
    if: ${{ startsWith( github.ref , 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    needs: [build, doxygen]
    outputs:
      RELEASE_HTTP_CODE: ${{ steps.create_release.outputs.RELEASE_HTTP_CODE }}
      RELEASE_JSON: ${{ steps.release_json.outputs.RELEASE_JSON }}
      RELEASE_ID: ${{ steps.release_id.outputs.RELEASE_ID }}
    steps:
    - name: Make release-create json
      run: |
        echo '{'\
          '"tag_name":"${{ github.ref_name }}",'\
          '"name":"${{ github.ref_name }}",'\
          '"prerelease":${{ ((contains( github.ref_name , 'dev' ) || contains( github.ref_name , 'alpha' ) || contains( github.ref_name , 'beta' ) || contains( github.ref_name , 'rc' )) && 'true') || 'false' }},'\
          '"draft":true,'\
          '"generate_release_notes":false}' \
          > .release-create.json
    - name: Display release-create json
      run: cat .release-create.json
    - name: Create release
    # https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#create-a-release
      id: create_release
      run: echo RELEASE_HTTP_CODE=$(curl -sL -X POST ${{ env.GH_API_HEADERS }} ${{ env.GH_API_PREFIX }}/releases -H "Content-Type:application/octet-stream" -d @.release-create.json --write-out "%{http_code}" -o .release.json) >> "$GITHUB_OUTPUT"
    - name: Release json info to output
      id: release_json
      run: echo RELEASE_JSON=$(cat .release.json) >> "$GITHUB_OUTPUT"
    - name: Display release json info
      run: |
        echo '${{ steps.create_release.outputs.RELEASE_HTTP_CODE }}'
        echo '${{ steps.release_json.outputs.RELEASE_JSON }}'
    - name: Check request success
      run: exit ${{ (steps.create_release.outputs.RELEASE_HTTP_CODE >= 200 && steps.create_release.outputs.RELEASE_HTTP_CODE < 300 && '0') || '1' }}
    - name: Export release id
      id: release_id
      run: echo RELEASE_ID=${{ fromJSON(steps.release_json.outputs.RELEASE_JSON)['id'] }} >> "$GITHUB_OUTPUT"

  upload-build:
    needs: [release, build, doxygen]
    strategy:
      fail-fast: false
      matrix:
        target: [
          linux,
          win32,
          win64,
          macosx
        ]
        asset: [
          lib,
          pd,
          max
        ]
        exclude:
        - target: linux
          asset: max
        - target: win64
          asset: pd
        include:
        - asset: lib
          version: ${{ needs.doxygen.outputs.SDT_CORE_VERSION }}
        - asset: pd
          version: ${{ needs.doxygen.outputs.SDT_PD_VERSION }}-${{ needs.doxygen.outputs.SDT_CORE_VERSION }}
        - asset: max
          version: ${{ needs.doxygen.outputs.SDT_MAX_VERSION }}-${{ needs.doxygen.outputs.SDT_CORE_VERSION }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Compose file name
      run: echo "SDT_ASSET_NAME=SDT_${{ matrix.target }}_${{ matrix.asset }}_${{ matrix.version }}" >> "$GITHUB_ENV"
    - uses: actions/download-artifact@v3
      with:
        name: SDT_${{ matrix.target }}_${{ matrix.asset }}
        path: ${{ env.SDT_ASSET_NAME }}
    - name: Display downloaded artifacts
      run: ls -R ${{ env.SDT_ASSET_NAME }}
    - name: Compress artifact
      run: zip -r ${{ env.SDT_ASSET_NAME }}.zip ${{ env.SDT_ASSET_NAME }}
    - name: Upload artifact to release
    # https://docs.github.com/en/rest/releases/assets?apiVersion=2022-11-28#upload-a-release-asset
      run: echo UPLOAD_HTTP_CODE=$(curl -sL -X POST ${{ env.GH_API_HEADERS }} -H "Content-Type:application/zip" https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.release.outputs.RELEASE_ID }}/assets?name=${{ env.SDT_ASSET_NAME }}.zip --data-binary @${{ env.SDT_ASSET_NAME }}.zip --write-out "%{http_code}" -o .upload.json) >> "$GITHUB_ENV"
    - name: Display request response
      run: |
        echo '${{ env.UPLOAD_HTTP_CODE }}'
        cat .upload.json
    - name: Check request success
      run: exit ${{ (env.UPLOAD_HTTP_CODE >= 200 && env.UPLOAD_HTTP_CODE < 300 && '0') || '1' }}

  upload-refman:
    runs-on: ubuntu-latest
    needs: [release, doxygen]
    steps:
    - name: Export asset name
      run: echo SDT_ASSET_NAME=SDT_refman_${{ needs.doxygen.outputs.SDT_CORE_VERSION }}.pdf >> "$GITHUB_ENV"
    - uses: actions/download-artifact@v3
      with:
        name: refman
        path: artifacts
    - name: Display downloaded artifacts
      run: ls -R artifacts
    - name: Upload artifact to release
    # https://docs.github.com/en/rest/releases/assets?apiVersion=2022-11-28#upload-a-release-asset
      run: echo UPLOAD_HTTP_CODE=$(curl -sL -X POST ${{ env.GH_API_HEADERS }} -H "Content-Type:application/pdf" https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.release.outputs.RELEASE_ID }}/assets?name=${{ env.SDT_ASSET_NAME }} --data-binary @artifacts/refman.pdf --write-out "%{http_code}" -o .upload.json) >> "$GITHUB_ENV"
    - name: Display request response
      run: |
        echo '${{ env.UPLOAD_HTTP_CODE }}'
        cat .upload.json
    - name: Check request success
      run: exit ${{ (env.UPLOAD_HTTP_CODE >= 200 && env.UPLOAD_HTTP_CODE < 300 && '0') || '1' }}

  deploy-pages:
    runs-on: ubuntu-latest
    needs: [release, doxygen]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: doxygen-html
        path: pages
    - name: Display downloaded artifacts
      run: ls -R pages
    - name: No Jekyll in pages
      run: touch pages/.nojekyll
    - name: Deploy pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        token: ${{ secrets.REPOSITORY_TOKEN }}
        branch: gh-pages
        folder: pages
        single-commit: true
